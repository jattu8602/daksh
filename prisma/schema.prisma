// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MENTOR
  STUDENT
}

model User {
  id        String   @id @default(uuid())
  name      String
  username  String   @unique
  password  String
  qrCode    String?
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student Student? @relation("StudentToUser")
  mentor  Mentor?  @relation("MentorToUser")
  admin   Admin?   @relation("AdminToUser")

  // Indexes for better performance
  @@index([username])
  @@index([role])
}

model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  email     String?  @unique
  phone     String?
  createdBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation("AdminToUser", fields: [userId], references: [id], onDelete: Cascade)

  // Index for queries
  @@index([userId])
}

model School {
  id        String   @id @default(uuid())
  name      String
  code      String   @unique
  email     String?  @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  classes Class[]

  // Indexes for better performance
  @@index([code])
  @@index([name])
}

model Class {
  id              String   @id @default(uuid())
  name            String
  schoolId        String
  totalStudents   Int?
  boys            Int?
  girls           Int?
  startRollNumber Int      @default(1)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  school   School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  students Student[]

  // Indexes for better performance
  @@index([schoolId])
  @@index([name])
  @@index([createdAt])
  @@index([totalStudents])
}

model Student {
  id        String   @id @default(uuid())
  user      User     @relation("StudentToUser", fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  rollNo    Int
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId   String
  name      String
  gender    String
  username  String
  password  String
  qrCode    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes for better performance
  @@index([classId])
  @@index([rollNo])
  @@index([userId])
  @@index([username])
  @@index([createdAt])
  @@index([gender])
  @@index([name])
}

model Mentor {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation("MentorToUser", fields: [userId], references: [id], onDelete: Cascade)

  // Index for better performance
  @@index([userId])
}

model Video {
  id        Int      @id @default(autoincrement())
  title     String
  source    String
  url       String
  createdAt DateTime @default(now())
}
