// prisma/schema.prisma
// learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // MongoDB support is now GA; no need for previewFeatures
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MENTOR
  STUDENT
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  username     String    @unique
  password     String
  qrCode       String?
  profileImage String?
  role         UserRole
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  sessions     Session[]

  // Relations (only name + relationName here)
  student Student? @relation("StudentToUser")
  mentor  Mentor?  @relation("MentorToUser")
  admin   Admin?   @relation("AdminToUser")
  followers Follow[] @relation("FollowFollower")
  following Follow[] @relation("FollowFollowing")

  // keep a non-unique index on role
  @@index([role])
}

model Admin {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @unique @db.ObjectId
  email         String?   @unique
  phone         String?
  emailVerified Boolean   @default(false)
  lastActiveAt  DateTime? @default(now())
  isOnline      Boolean   @default(false)
  createdBy     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Child side declares fields+references
  user User @relation("AdminToUser", fields: [userId], references: [id])
}

model School {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  code      String   @unique
  email     String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  classes       Class[]       @relation("SchoolToClass")
  schoolClasses SchoolClass[] @relation("SchoolToSchoolClass")

  // keep an index on name only
  @@index([name])
}

model Class {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  startRollNumber Int      @default(1)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  schoolId      String?       @db.ObjectId
  school        School?       @relation("SchoolToClass", fields: [schoolId], references: [id])
  schoolClasses SchoolClass[] @relation("ClassToSchoolClass")
  students      Student[]     @relation("StudentToClass")
  messages      Message[]     @relation("MessageToClass")

  @@index([createdAt])
  @@index([name])
}

model SchoolClass {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  schoolId        String        @db.ObjectId
  commonClassId   String        @db.ObjectId
  totalStudents   Int           @default(0)
  boys            Int           @default(0)
  girls           Int           @default(0)
  startRollNumber Int           @default(1)
  section         String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  school      School      @relation("SchoolToSchoolClass", fields: [schoolId], references: [id])
  commonClass Class       @relation("ClassToSchoolClass", fields: [commonClassId], references: [id])
  students    Student[]   @relation("StudentToSchoolClass")
  messages    Message[]   @relation("MessageToSchoolClass")

  @@index([schoolId])
  @@index([commonClassId])
  @@index([createdAt])
  @@index([name])
}

model Student {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  userId         String          @unique @db.ObjectId
  rollNo         Int
  classId        String?         @db.ObjectId
  schoolClassId  String?         @db.ObjectId
  name           String
  gender         String
  username       String
  password       String
  qrCode         String
  profileImage   String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  reviews        Review[]
  highlightStats HighlightStat[]
  commentLikes   CommentLike[]   @relation("StudentToCommentLike")

  // Child side declares fields+references
  user        User         @relation("StudentToUser", fields: [userId], references: [id])
  class       Class?       @relation("StudentToClass", fields: [classId], references: [id])
  schoolClass SchoolClass? @relation("StudentToSchoolClass", fields: [schoolClassId], references: [id])
  messages    Message[]    @relation("StudentMessages")

  @@index([classId])
  @@index([schoolClassId])
  @@index([rollNo])
  @@index([username])
  @@index([createdAt])
  @@index([gender])
  @@index([name])
}

model Mentor {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  userId           String            @unique @db.ObjectId
  isOrganic        Boolean           @default(true)
  profilePhoto     String
  tag              String            @default("organic")
  email            String?
  bio              String?
  skills           String[]
  socialLinks      Json?
  subject          String?
  language         String?
  reels            Json?
  videos           Json?
  highlights       Json?
  posts            Json?
  createdByAdminId String?           @db.ObjectId
  isActive         Boolean           @default(true)
  loginLastAt      DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  videoAssignments VideoAssignment[]

  // Child side declares fields+references
  user User @relation("MentorToUser", fields: [userId], references: [id])

  @@index([isOrganic])
  @@index([tag])
  @@index([createdByAdminId])
  @@index([isActive])
}

model Video {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  source          String
  sourcePlatform  String // 'youtube', 'instagram', or 'unknown'
  url             String
  mediaType       String            @default("video") // 'video' or 'image'
  metaDescription String?
  videoHashtags   VideoHashtag[]
  assignments     VideoAssignment[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([title])
  @@index([source])
  @@index([sourcePlatform])
  @@index([mediaType])
  @@index([createdAt])
}

model Hashtag {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  tag       String         @unique
  videos    VideoHashtag[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([createdAt])
}

model VideoHashtag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  videoId   String   @db.ObjectId
  hashtagId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  video   Video   @relation(fields: [videoId], references: [id])
  hashtag Hashtag @relation(fields: [hashtagId], references: [id])

  @@unique([videoId, hashtagId])
  @@index([videoId])
  @@index([hashtagId])
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model VideoJob {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  url          String
  status       String // 'pending', 'processing', 'success', 'error'
  result       Json?
  error        String?
  progress     Int      @default(0)
  currentStage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Message {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  classId       String?  @db.ObjectId
  schoolClassId String?  @db.ObjectId
  senderId      String   @db.ObjectId
  text          String
  createdAt     DateTime @default(now())

  class       Class?       @relation("MessageToClass", fields: [classId], references: [id])
  schoolClass SchoolClass? @relation("MessageToSchoolClass", fields: [schoolClassId], references: [id])
  sender      Student      @relation("StudentMessages", fields: [senderId], references: [id])

  @@index([classId])
  @@index([schoolClassId])
  @@index([senderId])
  @@index([createdAt])
}

model VideoAssignment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  videoId     String   @db.ObjectId
  mentorId    String   @db.ObjectId
  contentType String // 'videos', 'shorts', 'post', 'highlights'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  video  Video  @relation(fields: [videoId], references: [id])
  mentor Mentor @relation(fields: [mentorId], references: [id])

  // Relations
  highlightStats HighlightStat[]

  @@unique([videoId, mentorId, contentType])
  @@index([videoId])
  @@index([mentorId])
  @@index([contentType])
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId   String   @db.ObjectId
  description String
  rating      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id])

  @@index([studentId])
  @@index([createdAt])
}

model HighlightStat {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  videoAssignId String        @db.ObjectId
  studentId     String        @db.ObjectId
  watched       Boolean       @default(false)
  liked         Boolean       @default(false)
  comment       String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  commentLikes  CommentLike[] @relation("CommentToLike")

  videoAssign VideoAssignment @relation(fields: [videoAssignId], references: [id])
  student     Student         @relation(fields: [studentId], references: [id])

  @@unique([videoAssignId, studentId])
  @@index([videoAssignId])
  @@index([studentId])
  @@index([createdAt])
}

model EmailVerification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  otp       String
  userId    String   @db.ObjectId
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([userId])
  @@index([expiresAt])
}

model CommentLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  commentId String   @db.ObjectId // references HighlightStat (the comment)
  studentId String   @db.ObjectId // references Student
  createdAt DateTime @default(now())

  comment HighlightStat @relation("CommentToLike", fields: [commentId], references: [id])
  student Student       @relation("StudentToCommentLike", fields: [studentId], references: [id])

  @@unique([commentId, studentId])
  @@index([commentId])
  @@index([studentId])
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId // The user who follows
  followingId String   @db.ObjectId // The user being followed
  status      String   @default("accepted") // For future: 'pending', 'accepted', 'rejected'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  follower    User     @relation("FollowFollower", fields: [followerId], references: [id])
  following   User     @relation("FollowFollowing", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@index([status])
}
