// prisma/schema.prisma
// learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // MongoDB support is now GA; no need for previewFeatures
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MENTOR
  STUDENT
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  username  String     @unique
  password  String
  qrCode    String?
  role      UserRole
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations (only name + relationName here)
  student   Student?   @relation("StudentToUser")
  mentor    Mentor?    @relation("MentorToUser")
  admin     Admin?     @relation("AdminToUser")

  // keep a non-unique index on role
  @@index([role])
}

model Admin {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  email     String?    @unique
  phone     String?
  createdBy String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Child side declares fields+references
  user      User       @relation("AdminToUser", fields: [userId], references: [id])
}

model School {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  code      String     @unique
  email     String?    @unique
  phone     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  classes   Class[]

  // keep an index on name only
  @@index([name])
}

model Class {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  schoolId        String    @db.ObjectId
  totalStudents   Int?
  boys            Int?
  girls           Int?
  startRollNumber Int       @default(1)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  school          School    @relation(fields: [schoolId], references: [id])
  students        Student[]

  @@index([schoolId])
  @@index([createdAt])
  @@index([totalStudents])
}

model Student {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  rollNo    Int
  classId   String     @db.ObjectId
  name      String
  gender    String
  username  String
  password  String
  qrCode    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Child side declares fields+references
  user      User       @relation("StudentToUser", fields: [userId], references: [id])
  class     Class      @relation(fields: [classId], references: [id])

  @@index([classId])
  @@index([rollNo])
  @@index([username])
  @@index([createdAt])
  @@index([gender])
  @@index([name])
}

model Mentor {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  userId          String     @unique @db.ObjectId
  isOrganic       Boolean    @default(true)
  profilePhoto    String
  tag             String     @default("organic")
  email           String?
  bio             String?
  skills          String[]
  socialLinks     Json?
  createdByAdminId String?   @db.ObjectId
  isActive        Boolean    @default(true)
  loginLastAt     DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Child side declares fields+references
  user            User       @relation("MentorToUser", fields: [userId], references: [id])

  @@index([isOrganic])
  @@index([tag])
  @@index([createdByAdminId])
  @@index([isActive])
}

model Video {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  source    String
  url       String
  createdAt DateTime   @default(now())
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([expiresAt])
}

model VideoJob {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  url          String
  status       String   // 'pending', 'processing', 'success', 'error'
  result       Json?
  error        String?
  progress     Int      @default(0)
  currentStage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
