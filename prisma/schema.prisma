// prisma/schema.prisma
// learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // MongoDB support is now GA; no need for previewFeatures
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MENTOR
  STUDENT
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  username     String    @unique
  password     String
  qrCode       String?
  profileImage String?
  role         UserRole
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  sessions     Session[]

  // Relations (only name + relationName here)
  student Student? @relation("StudentToUser")
  mentor  Mentor?  @relation("MentorToUser")
  admin   Admin?   @relation("AdminToUser")

  // Follow relationships
  followers  Follow[] @relation("UserFollowers")
  following  Follow[] @relation("UserFollowing")

  // keep a non-unique index on role
  @@index([role])
}

model Admin {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  userId         String    @unique @db.ObjectId
  email          String?   @unique
  phone          String?
  emailVerified  Boolean   @default(false)
  lastActiveAt   DateTime? @default(now())
  isOnline       Boolean   @default(false)
  createdBy      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Child side declares fields+references
  user User @relation("AdminToUser", fields: [userId], references: [id])
}

model School {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  code      String   @unique
  email     String?  @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  classes Class[]

  // keep an index on name only
  @@index([name])
}

model Class {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  parentClassId   String?  @db.ObjectId // Reference to common/template class
  schoolId        String?  @db.ObjectId
  isCommon        Boolean  @default(false)
  totalStudents   Int      @default(0)
  boys            Int      @default(0)
  girls           Int      @default(0)
  startRollNumber Int      @default(1)
  section         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Self-referential relationship for template pattern
  parentClass     Class?    @relation("ClassTemplate", fields: [parentClassId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schoolClasses   Class[]   @relation("ClassTemplate")

  school   School?   @relation(fields: [schoolId], references: [id])
  students Student[]
  messages Message[]
  boards   Board[]

  @@index([schoolId])
  @@index([parentClassId])
  @@index([createdAt])
  @@index([totalStudents])
  @@index([isCommon])
}

model Student {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  userId         String          @unique @db.ObjectId
  rollNo         Int
  classId        String          @db.ObjectId
  name           String
  gender         String
  username       String
  password       String
  qrCode         String
  profileImage   String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  reviews        Review[]
  highlightStats HighlightStat[]
  onboarding     Onboarding?    @relation("StudentOnboarding")

  // Child side declares fields+references
  user     User      @relation("StudentToUser", fields: [userId], references: [id])
  class    Class     @relation(fields: [classId], references: [id])
  messages Message[] @relation("StudentMessages")

  @@index([classId])
  @@index([rollNo])
  @@index([username])
  @@index([createdAt])
  @@index([gender])
  @@index([name])
}

model Mentor {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  userId           String            @unique @db.ObjectId
  isOrganic        Boolean           @default(true)
  profilePhoto     String
  tag              String            @default("organic")
  email            String?
  bio              String?
  skills           String[]
  socialLinks      Json?
  subject          String?
  language         String?
  reels            Json?
  videos           Json?
  highlights       Json?
  posts            Json?
  createdByAdminId String?           @db.ObjectId
  isActive         Boolean           @default(true)
  loginLastAt      DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  videoAssignments VideoAssignment[]
  subjectMentors   SubjectMentor[]

  // Child side declares fields+references
  user User @relation("MentorToUser", fields: [userId], references: [id])

  @@index([isOrganic])
  @@index([tag])
  @@index([createdByAdminId])
  @@index([isActive])
}

model Video {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  source          String
  sourcePlatform  String // 'youtube', 'instagram', or 'unknown'
  url             String
  mediaType       String            @default("video") // 'video' or 'image'
  metaDescription String?
  videoHashtags   VideoHashtag[]
  assignments     VideoAssignment[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([title])
  @@index([source])
  @@index([sourcePlatform])
  @@index([mediaType])
  @@index([createdAt])
}

model Hashtag {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  tag       String         @unique
  videos    VideoHashtag[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([createdAt])
}

model VideoHashtag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  videoId   String   @db.ObjectId
  hashtagId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  video   Video   @relation(fields: [videoId], references: [id])
  hashtag Hashtag @relation(fields: [hashtagId], references: [id])

  @@unique([videoId, hashtagId])
  @@index([videoId])
  @@index([hashtagId])
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model VideoJob {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  url          String
  status       String // 'pending', 'processing', 'success', 'error'
  result       Json?
  error        String?
  progress     Int      @default(0)
  currentStage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  classId   String   @db.ObjectId
  senderId  String   @db.ObjectId
  text      String
  createdAt DateTime @default(now())

  class  Class   @relation(fields: [classId], references: [id])
  sender Student @relation("StudentMessages", fields: [senderId], references: [id])

  @@index([classId])
  @@index([senderId])
  @@index([createdAt])
}

model VideoAssignment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  videoId     String   @db.ObjectId
  mentorId    String   @db.ObjectId
  contentType String // 'videos', 'shorts', 'post', 'highlights'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  video  Video  @relation(fields: [videoId], references: [id])
  mentor Mentor @relation(fields: [mentorId], references: [id])

  // Relations
  highlightStats HighlightStat[]

  @@unique([videoId, mentorId, contentType])
  @@index([videoId])
  @@index([mentorId])
  @@index([contentType])
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId   String   @db.ObjectId
  description String
  rating      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id])

  @@index([studentId])
  @@index([createdAt])
}

model HighlightStat {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  videoAssignId String   @db.ObjectId
  studentId     String   @db.ObjectId
  watched       Boolean  @default(false)
  liked         Boolean  @default(false)
  comment       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  videoAssign VideoAssignment @relation(fields: [videoAssignId], references: [id])
  student     Student         @relation(fields: [studentId], references: [id])

  @@index([videoAssignId])
  @@index([studentId])
  @@index([createdAt])
}

model EmailVerification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  otp       String
  userId    String   @db.ObjectId
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([userId])
  @@index([expiresAt])
}

model Board {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   // NCERT, CBSE, ICSE, etc.
  code        String   // ncert, cbse, icse
  description String?
  classId     String   @db.ObjectId
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  class    Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  subjects Subject[]
  beyondSchoolSubjects BeyondSchoolSubject[]

  @@index([classId])
  @@index([name])
  @@index([code])
  @@index([isActive])
}

model Subject {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  photo       String?
  boardId     String   @db.ObjectId
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  board             Board              @relation(fields: [boardId], references: [id], onDelete: Cascade)
  subjectMentors    SubjectMentor[]
  subjectPlaylists  SubjectPlaylist[]
  subjectNcerts     SubjectNcert[]
  subjectSheets     SubjectSheet[]

  @@index([boardId])
  @@index([name])
  @@index([isActive])
}

model BeyondSchoolSubject {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  photo       String?
  boardId     String   @db.ObjectId
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  board             Board              @relation(fields: [boardId], references: [id], onDelete: Cascade)
  subjectMentors    SubjectMentor[]
  subjectPlaylists  SubjectPlaylist[]
  subjectNcerts     SubjectNcert[]
  subjectSheets     SubjectSheet[]

  @@index([boardId])
  @@index([name])
  @@index([isActive])
}

model SubjectMentor {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  subjectId String?  @db.ObjectId
  beyondSchoolSubjectId String? @db.ObjectId
  mentorId  String   @db.ObjectId
  role      String?  @default("instructor") // instructor, assistant, etc.
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject Subject? @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  beyondSchoolSubject BeyondSchoolSubject? @relation(fields: [beyondSchoolSubjectId], references: [id], onDelete: Cascade)
  mentor  Mentor  @relation(fields: [mentorId], references: [id], onDelete: Cascade)

  @@unique([subjectId, mentorId])
  @@unique([beyondSchoolSubjectId, mentorId])
  @@index([subjectId])
  @@index([beyondSchoolSubjectId])
  @@index([mentorId])
}

model SubjectPlaylist {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  subjectId   String?  @db.ObjectId
  beyondSchoolSubjectId String? @db.ObjectId
  title       String
  description String?
  thumbnail   String?
  url         String?
  platform    String?  // youtube, vimeo, etc.
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subject Subject? @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  beyondSchoolSubject BeyondSchoolSubject? @relation(fields: [beyondSchoolSubjectId], references: [id], onDelete: Cascade)

  @@index([subjectId])
  @@index([beyondSchoolSubjectId])
  @@index([order])
  @@index([isActive])
}

model SubjectNcert {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  subjectId   String?  @db.ObjectId
  beyondSchoolSubjectId String? @db.ObjectId
  title       String
  description String?
  fileUrl     String?
  chapter     String?
  grade       String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subject Subject? @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  beyondSchoolSubject BeyondSchoolSubject? @relation(fields: [beyondSchoolSubjectId], references: [id], onDelete: Cascade)

  @@index([subjectId])
  @@index([beyondSchoolSubjectId])
  @@index([grade])
  @@index([chapter])
  @@index([order])
  @@index([isActive])
}

model SubjectSheet {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  subjectId   String?  @db.ObjectId
  beyondSchoolSubjectId String? @db.ObjectId
  title       String
  description String?
  fileUrl     String?
  type        String?  // worksheet, answer_key, practice, etc.
  difficulty  String?  // easy, medium, hard
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subject Subject? @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  beyondSchoolSubject BeyondSchoolSubject? @relation(fields: [beyondSchoolSubjectId], references: [id], onDelete: Cascade)

  @@index([subjectId])
  @@index([beyondSchoolSubjectId])
  @@index([type])
  @@index([difficulty])
  @@index([order])
  @@index([isActive])
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  followingId String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@index([createdAt])
}

model Onboarding {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId         String   @unique @db.ObjectId
  interests         String[] // Array of selected interests
  completed         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  student Student @relation("StudentOnboarding", fields: [studentId], references: [id], onDelete: Cascade)

  // Removed duplicate @@index([studentId])
  @@index([completed])
  @@index([createdAt])
}
